\input texinfo

@comment %**start of header
@setfilename workroom.info
@set UPDATED 22 January 2023
@set UPDATED-MONTH January 2023
@set EDITION 2.3.1
@set VERSION 2.3.1
@documentencoding UTF-8
@codequotebacktick on
@codequoteundirected on
@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp
@settitle Workroom User Manual, version @value{VERSION}
@comment %**end of header

@copying
This manual is for Workroom (version @value{VERSION},
@value{UPDATED}), a workspace manager for Emacs.

Copyright @copyright{}  2022, 2023  Akib Azmain Turja.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end quotation
@end copying

@dircategory Emacs
@direntry
* Workroom: (workroom).         More than just a workspace manager.
@end direntry

@titlepage
@title Workroom User Manual
@subtitle For version @value{VERSION}
@author Akib Azmain Turja
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Workroom Manual
@insertcopying
@end ifnottex

@menu
* Overview::            What problem does Workroom solve?
* Workrooms::           A room (sort of) to do your work.
* Views::               Just a window configuration.
* Enabling Workroom::   Start using Workroom.
* Switching Workroom::  Switch to another workroom.
* Buffer Management::   Forget the irrelevant buffers.
* Renaming Workroom::   The better the name, the more helpful it is.
* Killing Workroom::    When you no longer need the workroom.
* Switching View::      Switch to another view.
* Killing View::        When you're done it the view.
* Renaming View::       Fixing typo in name.
* Cloning::             Making a twin copy of your workroom or view.
* Command Map::         A keymap contains all useful commands.
* Workroom-aware Commands::  Replacements for standard commands.
* Winner Integration::  Window configuration undo history for views.
* Desktop Integration::  Save your workrooms in your desktop file.
* Bookmarking Workroom::  Another way to save your workroom.
* Project Integration::  Automated buffer list for your project.

Appendices
* GNU General Public License::  Copying condition for Workroom.
* GNU Free Documentation License::  Copying conditions of this manual.
* Index::               A list of various things.
@end menu

@node Overview
@cindex overview
@chapter Overview

Emacs is designed to be used for a long time and doing different tasks
simultaneously.  As Emacs uptime increases, the number of buffers
increase too, since you do different sort of a thing in Emacs.

For example, you're working on program A to implement a feature.  You
have some buffers open.  Then you discover that someone that reported
a bug of your program B, and it should be fixed as soon as possible.
So you open the some source files and start fixing the bug.  But while
switching buffers, you have to find your target buffer within the
(now) irrelevant buffers of program A.  In the meanwhile, someone
report a security vulnerability in your program C.  You open the
source files and start fixing them.  Again while switching buffers,
you have to find your target buffer within the (now) irrelevant
buffers of program A and B.  After you fixed the bugs in program B and
C, you return to program A.  But now, you having a hard time to find
those buffers, and you no longer have your carefully crafted window
configuration, and you can't even remember from where you left off.

With Workroom, you won't have this problem.  In the above example, you
create a workroom for your program A, then program B and C.  When you
are done with program B and C, you switch to program A's workroom and
you return just where left off, and you are also not prompted with any
irrelevant buffers while switching buffer.

@node Workrooms
@cindex workrooms
@cindex rooms
@chapter Workrooms

@dfn{Workroom} is a set of buffers.  When you are in a workroom,
you're not presented with buffer that are outside of that set.  This
allows you to work on multiple projects simultaneously, and Emacs will
show you only the buffers of the project's workroom you are current
in.

@cindex default workroom
@cindex default room
There is a always a default workroom, named ``master'' by default.
It contains all the live buffers of your Emacs.  You can't kill it.
You can rename it to anything, or customize the following variable:

@defopt workroom-default-room-name
The name of the default workroom.

Changing this doesn't take effect while Workroom is active.
@end defopt

@node Views
@cindex views
@chapter Views

Each workroom contains its own set of @dfn{views}.  A view is just a
window configuration.

You can have multiple views in a single workroom.  When you switch
from view A to view B, your window configuration is saved into view A,
and view B's window configuration is loaded.  When you switch back
view A, the saved window configuration is loaded and you return where
you left off.

There is a default of view, by default it's ``main''.  This view
doesn't have special properties, it's just chosen when there isn't any
reason to choose a particular view.  You may rename the view, but a
view named ``main'' will created when Workroom searches for the
default view.  However, you can customize the name.

@defopt workroom-default-view-name
The name of default view.
@end defopt

@node Enabling Workroom
@cindex enabling workroom
@cindex workroom, enable
@chapter Enabling Workroom

Before you can use any feature of Workroom, you have to enable it.  To
enable, use the command @command{workroom-mode} to enable the global
minor mode.

@defun workroom-mode arg
Interactively, toggle Workroom mode.  If prefix argument is given and
positive, enable Workroom mode.  If prefix argument is zero or
negative, disable Workroom mode.

Non-interactively, enable Workroom if @var{arg} is positive, disable
if @var{arg} is zero or negative and toggle if @var{arg} is
@code{toggle}.
@end defun

After you enable the mode, you should see the lighter
@samp{WR[master][main]} in your mode line, where @samp{master} and
@samp{main} is colored.  This indicates that you are in the ``main''
view of ``master'' workroom, the default workroom.  However, the view
may also be @samp{main<@var{N}>}, if you have multiple frames.

@cindex standard command replacements
Workroom doesn't affect the any command.  It defines its own
workroom-aware command as replacements for the standard commands.

@findex workroom-switch-to-buffer
@kindex C-x c b
@kindex b (command map)
@kindex command map, b
@findex workroom-kill-buffer
@kindex C-x c k
@kindex k (command map)
@kindex command map, k
@findex workroom-list-buffers
For example, the command @command{workroom-switch-to-buffer}, bound to
@kbd{C-c c b} by default, replaces the standard
@command{switch-to-buffer} Emacs command,
@command{workroom-kill-buffer}, bound to @kbd{C-c c k} by default,
replaces @command{switch-to-buffer}, and
@command{workroom-list-buffers} replaces @command{list-buffers}.
These replacement commands accept a prefix argument, unless otherwise
specified.  Giving them a prefix will use the standard command.

You encouraged to remap the standard commands to the workroom-aware
commands by putting something like the following in your init file:

@lisp
(global-set-key [remap switch-to-buffer]
                #'workroom-switch-to-buffer)
(global-set-key [remap kill-buffer] #'workroom-kill-buffer)
(global-set-key [remap list-buffers] #'workroom-list-buffers)
@end lisp

@node Switching Workroom
@cindex switching workroom
@cindex workroom, switch
@cindex creating workroom
@cindex workroom, create
@chapter Creating Workroom

After you enable Workroom mode, you're in the ``master'' workroom.  As
this contains all your live buffers, you won't notice any difference.

@findex workroom-switch
@kindex C-x c s
@kindex s (command map)
@kindex command map, s
To switch to another workroom, invoke the command
@command{workroom-switch}, bound to @kbd{C-x c s} by default.  This
will prompt you for the name of the workroom to switch to.  Completion
is available.  You can also enter the name of a non-existing workroom,
in that case it'll be created.

After you switch to a new workroom, you'll see all of windows are
gone!  Don't worry, they are just hidden.  You'll see the scratch
shown.  It is the only buffer of the new workroom.

If you invoke the command @command{workroom-switch-to-buffer} or
the command @command{workroom-list-buffers}, you'll see that only the
@samp{*scratch*} buffer is available.

To use some other buffer as the first member of your new workrooms,
change @code{workroom-default-buffer-name} to that buffer's name.

@node Buffer Management
@cindex buffer management
@cindex managing buffers
@chapter Buffer Management

In a new workroom, there is just the scratch buffer.  Not useful.  But
after you add the buffers you need, it's very useful, since you'll
only see those relevant buffers you chose.

@cindex adding buffer
@cindex buffer, add
@cindex workroom, buffer, add
@cindex workroom, add buffer
@findex workroom-add-buffer
@kindex C-x c a
@kindex a (command map)
@kindex command map, a
Buffers can be added to current workroom with the command
@command{workroom-add-buffer}, bound to @kbd{C-x c a} by default.
This will prompt you for the buffer to add.  Completion is available.

After you add the buffers you need,
@command{workroom-switch-to-buffer} and other workroom-aware commands
will show you only those buffers.

@cindex removing buffer
@cindex buffer, remove
@cindex workroom, buffer, remove
@cindex workroom, remove buffer
@findex workroom-remove-buffer
@kindex C-x c K
@kindex K (command map)
@kindex command map, K
Occasionally, you'll need to remove some buffers from your workroom
without killing them.  You can do this with the command
@command{workroom-remove-buffer}, bound to @kbd{C-x c K} by default.
This will prompt you for the buffer to remove, with completion.

The standard commands are not affected by the current workroom.  You
are encouraged to remap them to the workroom-aware commands.
@xref{Workroom-aware Commands}, for an example.

@node Renaming Workroom
@cindex renaming workroom
@cindex workroom, rename
@chapter Renaming Workroom

@findex workroom-rename
@kindex C-x c r
@kindex r (command map)
@kindex command map, r
You may want to rename your workroom.  You can do this anytime with
any of your workrooms with the command @command{workroom-rename},
bound to @kbd{C-x c r} by default.  This will ask for you for the
workroom to rename, then it'll ask for the new name.  After that,
you'll see the workroom is renamed to your new name.

@node Killing Workroom
@cindex killing workroom
@cindex workroom, kill
@chapter Killing Workroom

Once you are done with a workroom, you'll want kill it and forget
about it.  You can kill any workrooms, except the default workroom,
named ``master'' by default.

@findex workroom-kill
@kindex C-x c d
@kindex d (command map)
@kindex command map, d
To kill a workroom, invoke the command @command{workroom-kill}, bound
to @kbd{C-x c d} by default.  This will ask you for the workroom to
kill.

@findex workroom-kill-with-buffers
@kindex C-x c C-d
@kindex C-d (command map)
@kindex command map, C-d
In some cases, you'll want to kill a workroom along with its buffers.
You can do this with the command @command{workroom-kill-with-buffers},
bound to @kbd{C-x c C-d} by default.  This will too ask you for the
workroom to kill, but it'll kill all buffer in the workroom along with
the workroom.  However, if a buffer also belongs to another workroom
that is not the default workroom, it is not killed.  But you can add a
prefix argument to kill them too.

@node Switching View
@cindex switching view
@cindex view, switch
@cindex creating view
@cindex view, create
@chapter Switching View

@findex workroom-switch-view
@kindex C-x c S
@kindex S (command map)
@kindex command map, S
As stated before, a workroom can have multiple views.  You can switch
between them with the command @command{workroom-switch-view}, bound to
@kbd{C-x c S} by default.  This will prompt you for the name of the
view to switch to.  Completion is available.  You can also enter the
name of a non-existing view, in that case it'll be created.

You can pass a prefix argument to switch to a view in another
workroom.  Then you prompted for the parent workroom (the workroom to
which the target view belongs to) first.

After you switch, you'll get a scratch buffer on your view.  If you
don't switch to another room (by giving prefix argument), you'll see
that the buffers are the same.

To use some other buffer as the first buffer of the newly created
views, change @code{workroom-default-buffer-name} to that buffer's
name.

@node Killing View
@cindex killing view
@cindex view, kill
@chapter Killing View

@findex workroom-kill-view
@kindex C-x c D
@kindex D (command map)
@kindex command map, D
Once you are done playing with a view, you'll want kill it to get rid
of it.  To kill a view, invoke the command
@command{workroom-kill-view}, bound to @kbd{C-x c D} by default.  This
will ask you for the view to kill.

Just like the command @command{workroom-switch-view}, you can specify
the parent workroom by giving it a prefix argument.

@node Renaming View
@cindex renaming view
@cindex view, rename
@chapter Renaming View

@findex workroom-rename-view
@kindex C-x c R
@kindex R (command map)
@kindex command map, R
You may want to rename your view.  You can do this anytime with any of
your views with the command @command{workroom-rename-view}, bound to
@kbd{C-x c r} by default.  This will ask for you for the view to
rename, then it'll ask for the new name.  After that, you'll see the
view is renamed to your new name.

Just like the command @command{workroom-switch-view}, you can specify
the parent workroom by giving it a prefix argument.

@node Cloning
@cindex cloning
@chapter Cloning

@findex workroom-clone
@kindex C-x c c
@kindex c (command map)
@kindex command map, c
Sometimes, you may need to make a copy of your workroom.  You can do
this with the command @command{workroom-clone}, bound to @kbd{C-x c c}
by default.  This ask you for the workroom to clone and the name of
the new workroom.  This won't switch to the new workroom, however.

@findex workroom-clone-view
@kindex C-x c C
@kindex C (command map)
@kindex command map, C
You may also only clone a single view.  You can do this with the
command @command{workroom-clone-view}, bound to @kbd{C-x c C} by
default.  This ask you for the view to clone and the name of the new
workroom.  Like the @command{workroom-clone} this will also not switch
to the new view.

Just like the command @command{workroom-switch-view}, you can specify
the parent workroom by giving it a prefix argument.

@node Command Map
@cindex command map
@cindex map, command
@chapter Command Map

You should have noticed that, all the key bindings described above
start with @kbd{C-x c}.  This was chosen because it doesn't conflict
with Emacs default key bindings.  However, your personal key bindings
or other package can possibly conflict with Workroom's key default
key bindings.  So you can customize @code{workroom-command-map-prefix}
to whatever suits you.

@defopt workroom-command-map-prefix
Prefix key of Workroom commands.

It defaults of @kbd{C-x c}.

@findex workroom-rebind-command-map-prefix
Customizing this variable automatically takes effects.  However, after
changing from Lisp program doesn't immediately take effect.  Call the
function @code{workroom-rebind-command-map-prefix} for changes done
from Lisp program to take effect.  Alternatively you may re-enable
Workroom mode which will do that for you.
@end defopt

@node Workroom-aware Commands
@cindex workroom-aware commands
@cindex commands workroom-aware
@chapter Workroom-aware Commands

There isn't any concept of buffer grouping in Emacs.  So all commands
assume that all buffer are equally valid.  But with Workroom, that's
not the case.  But Workroom doesn't change the commands, instead it
provide replacements for them with identical behavior.  You can also
give them a prefix argument to use the standard command instead.

@findex workroom-switch-to-buffer
@kindex C-x c b
@kindex b (command map)
@kindex command map, b
First, the most indispensable one, the command
@command{workroom-switch-to-buffer}, it replaces the standard
@command{switch-to-buffer} Emacs command.

@findex workroom-kill-buffer
@kindex C-x c k
@kindex k (command map)
@kindex command map, k
The second most used, @command{workroom-switch-to-buffer}, replaces
@command{kill-buffer}.

@findex workroom-list-buffers
@findex workroom-buffer-menu
@findex workroom-ibuffer
@findex workroom-electric-buffer-list
And there are @command{workroom-list-buffers},
@command{workroom-buffer-menu}, @command{workroom-ibuffer} and
@command{workroom-electric-buffer-list}, which replace the commands
@command{list-buffers}, @command{buffer-menu}, @command{ibuffer} and
@command{electric-buffer-list} respectively.

You encouraged to remap the standard commands to the workroom-aware
commands.  For example, you can put something like the following in
your Emacs init file:

@lisp
(global-set-key [remap switch-to-buffer]
                #'workroom-switch-to-buffer)
(global-set-key [remap kill-buffer] #'workroom-kill-buffer)
(global-set-key [remap list-buffers] #'workroom-list-buffers)
@end lisp

@node Winner Integration
@cindex winner integration
@cindex integration, winner
@chapter Winner Integration

Winner mode (@pxref{Window Convenience,,, emacs, GNU Emacs Manual})
records window configuration changes and let you to undo them.  This
is nice, but by default doesn't work very well with Workroom.

As Winner records all window configuration changes frame-locally,
creating two problem, the first one is that if the undo enough you'll
eventually get the window configuration of another view without
changing your view, and the second one is that since the changes are
recorded frame-locally, you lose your undo history when you restore
your view in another frame.

@findex workroom-winner-mode
So Workroom provides the global minor mode
@command{workroom-winner-mode}.  This arranges that Winner's undo list
is stored view-locally, so that the another view's window
configuration won't get into the history, and the history will still
persist if you change your the frame.

@node Desktop Integration
@cindex desktop integration
@cindex integration, desktop
@chapter Desktop Integration

Workroom Integrates with the Desktop library (@pxref{Saving Emacs
Sessions,,, emacs, GNU Emacs Manual}), so that you can save your
workrooms as part of your desktop file and restore them later,
possibly in another Emacs session.

@findex workroom-desktop-save-mode
To enable Workroom's desktop integration, enable the global minor mode
@command{workroom-desktop-save-mode}.  This will save your workrooms
whenever the desktop file is saved.  When loading desktop from that
file, workrooms will be restore if Workroom mode is enabled.  This
mode won't automatically save desktop files, use the global minor mode
@command{desktop-save-mode} for that.

@node Bookmarking Workroom
@cindex bookmarking workroom
@cindex workroom, bookmark
@cindex bookmark integration
@cindex integration, bookmark
@chapter Bookmarking Workroom

Bookmarks (@pxref{Bookmarks,,, emacs, GNU Emacs Manual}) is an useful
feature of Emacs.  You can bookmark what you are reading, and with
Workroom, you can bookmark your whole workroom, including the buffers,
buffer positions, and views.

@findex workroom-bookmark
@kindex C-x c m
@kindex m (command map)
@kindex command map, m
There is the command @command{workroom-bookmark}, to bookmark a
workroom.  It is bound to @kbd{C-x c m} by default.  It'll ask for the
workroom to bookmark, then you'll prompted for the name of the
bookmark.  Then you can just use the standard bookmark commands to
with the bookmark to restore the bookmark.

@findex workroom-bookmark-multiple
@kindex C-x c m
@kindex m (command map)
@kindex command map, m
You can also bookmark multiple workroom together in a single bookmark.
You can use the command @command{workroom-bookmark-multiple} to
bookmark several workrooms.  It is bound to @kbd{C-x c M} by default.
It is similar to @command{workroom-bookmark}, but it'll ask you for a
comma separated workroom list instead.

@node Project Integration
@cindex project integration
@cindex integration, project
@chapter Project Integration

Adding and removing buffer can become a hassle, especially for
workrooms with many buffers.  You can automate this by creating a
project workroom, using the command
@command{workroom-switch-to-project-workroom}.  This will ask for the
project, then the name of workroom, and finally create and switch to
the workroom.  All project buffers will be automatically in the
workroom.  And you can add non-project buffers, and even remove some
project buffers.

There is a global minor mode
@command{workroom-auto-project-workroom-mode}, which creates and
switches to project workroom as soon as you open a file in a project.

As @command{workroom-auto-project-workroom-mode} creates workroom
whenever a project file is opened, you'll get duplicate workrooms if
you enable it before the desktop is loaded.  So you are advised to
enable the mode after the desktop file (if any) is loaded.

@node GNU General Public License
@appendix GNU General Public License

@include gpl.texi

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@node Index
@appendix Index

@printindex cp

@bye
