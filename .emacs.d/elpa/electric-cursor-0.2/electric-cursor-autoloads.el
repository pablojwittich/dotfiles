;;; electric-cursor-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from electric-cursor.el

(defvar electric-cursor-mode nil "\
Non-nil if Electric-Cursor mode is enabled.
See the `electric-cursor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `electric-cursor-mode'.")
(custom-autoload 'electric-cursor-mode "electric-cursor" nil)
(autoload 'electric-cursor-mode "electric-cursor" "\
Change the cursor automatically depending on mode.

This global minor mode adds the necessary hooks to modes defined
in `electric-cursor-alist' to change the cursor's shape when
entering and exiting those modes.  It also saves the cursor's
shape and restores it when exiting.

This is a global minor mode.  If called interactively, toggle the
`Electric-Cursor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='electric-cursor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "electric-cursor" '("electric-cursor-"))

;;; End of scraped data

(provide 'electric-cursor-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; electric-cursor-autoloads.el ends here
